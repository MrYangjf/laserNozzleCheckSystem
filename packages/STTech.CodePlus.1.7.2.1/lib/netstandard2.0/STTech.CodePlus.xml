<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STTech.CodePlus</name>
    </assembly>
    <members>
        <member name="T:STTech.CodePlus.Algorithm.Clusters.BaseCluster`1">
            <summary>
            聚类器基类
            </summary>
            <typeparam name="TPoint"></typeparam>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.Clusters.BaseCluster`1.Cluster(`0[])">
            <summary>
            聚类
            </summary>
            <param name="points">参与聚类计算的点</param>
            <returns>聚类后的分组结果</returns>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.Clusters.ClusterResult`1">
            <summary>
            聚类结果
            </summary>
            <typeparam name="TPoint"></typeparam>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.ClusterResult`1.HasNoisyPoint">
            <summary>
            是否包含噪点
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.ClusterResult`1.NoisyPoints">
            <summary>
            噪点
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.ClusterResult`1.PointGroup">
            <summary>
            分组
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.Clusters.DBScanCluster">
            <summary>
            DBScan算法聚类器
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.Clusters.DBScanCluster.#ctor(System.Int32,System.Int32)">
            <summary>
            构造DBScan算法的聚类器
            </summary>
            <param name="minimumPoints">单个簇最小点数，即一个簇中至少要包含的点的数量</param>
            <param name="epsilon">点之间的距离阈值，即两个点之间的距离小于等于eps时，它们被认为是相邻的</param>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.DBScanCluster.MinimumPoints">
            <summary>
            单个簇最小点数，即一个簇中至少要包含的点的数量。
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.DBScanCluster.Epsilon">
            <summary>
            点之间的距离阈值，即两个点之间的距离小于等于eps时，它们被认为是相邻的。
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.Clusters.DBScanCluster.Cluster(System.Drawing.Point[])">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.Clusters.KMeansCluster">
            <summary>
            KMeans算法聚类器
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.Clusters.KMeansCluster.#ctor(System.Int32)">
            <summary>
            构造KMeans聚类器
            </summary>
            <param name="clusterCount">聚类的个数，即将数据集分成k个簇</param>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.Clusters.KMeansCluster.ClusterCount">
            <summary>
            聚类的个数，即将数据集分成k个簇
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.DBScan">
            <summary>
            DBSCAN聚类算法工具类
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.DBScan.Cluster(System.Drawing.Point[],System.Int32,System.Int32)">
            <summary>
            执行DBSCAN聚类
            </summary>
            <param name="points">点坐标集合</param>
            <param name="minPts">单个簇最小点数</param>
            <param name="eps">点之间的距离阈值</param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.DBScan.ExpandCluster(System.Drawing.Point[],System.Int32[],System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Int32,System.Int32)">
            <summary>
            扩大聚类
            </summary>
            <param name="points">点坐标集合</param>
            <param name="labels">点所属聚类的Id</param>
            <param name="p">当前点</param>
            <param name="neighbors">相邻点集合</param>
            <param name="clusterId">聚类Id</param>
            <param name="eps">点之间的距离阈值</param>
            <param name="minPts">单个簇最小点数</param>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.DBScan.GetNeighbors(System.Drawing.Point[],System.Drawing.Point,System.Int32)">
            <summary>
            根据距离阈值获取指定点周边临近点
            </summary>
            <param name="points"></param>
            <param name="p"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.DBScan.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            计算两点之间距离
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.Dichotomy">
            <summary>
            二分法算法类
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.Dichotomy.BinarySearch``1(``0[],System.Func{``0,STTech.CodePlus.Algorithm.ComparisonResult},STTech.CodePlus.Algorithm.MatchStrategy)">
            <summary>
            二分法查找目标值在数组中的索引（值的比较由回调完成，不提供目标值）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数据集合</param>
            <param name="comparer">比较回调</param>
            <param name="strategy">匹配策略，如果是完全匹配策略，则若没有相等的则返回-1，若策略是匹配不到时采用较小值，则返回最接近的前一个值，若策略是匹配不到时采用较大值，则返回最接近的后一个值</param>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.KMeans">
            <summary>
            KMeans算法类
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.KMeans.Cluster(STTech.CodePlus.PointD[],System.Int32)">
            <summary>
            使用 KMeans 算法对 Point 数组进行聚类
            </summary>
            <param name="points">待聚类的 Point 数组</param>
            <param name="k">聚类的个数</param>
            <returns>聚类的结果</returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.KMP.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            模式匹配（KMP）
            查找子串在主串中的起始索引位置
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="source">主串</param>
            <param name="pattern">子串</param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.KMP.IndexOf``1(System.Collections.Generic.IEnumerable{``0}[],``0[])">
            <summary>
            查找子串在主串中的起始索引位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.KMP.GenerateNextArray``1(``0[])">
            <summary>
            根据输入的模式串p，生成一个next数组，next数组中存储了每个位置对应的最长公共前后缀长度。
            在KMP算法中，next数组的作用是在匹配过程中根据已匹配过的部分，确定下一次匹配的起始位置。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Algorithm.RegressionLine">
            <summary>
            回归线
            线性回归方程（y = kx + b）
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.RegressionLine.Slope">
            <summary>
            直线斜率<br/> 
            斜率（Slope）表示直线在水平方向上的变化率。它是直线上任意两点之间的纵向差异与横向差异的比值。
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Algorithm.RegressionLine.Intercept">
            <summary>
            直线截距<br/> 
            截距（Intercept）表示直线与纵坐标轴的交点位置。它是直线与纵坐标轴的交点的纵坐标值。
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.#ctor(System.Drawing.PointF[])">
            <summary>
            通过一组二维坐标点构造回归线
            </summary>
            <param name="points">坐标点数组</param>
            <exception cref="T:System.ArgumentException">当数据为空或数据点个数少于2个时抛出异常</exception>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.CalcMeanAbsoluteError(System.Drawing.PointF[])">
            <summary> 
            计算平均绝对误差（Mean Absolute Error，MAE）<br/>
            MAE是一组数据点在线上的离散程度的评估指标,它表示每个数据点的实际值与回归线预测值之间的差异的绝对值的平均值。
            </summary> 
            <param name="points">点集</param> 
            <returns>MAE</returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.CalcSumOfSquaredResiduals(System.Drawing.PointF[])">
            <summary> 
            计算给定点集到一条直线的残差平方和（SSR）<br/>
            SSR是回归模型拟合程度的评估指标，它表示每个数据点的实际值与回归线预测值之间的差异的平方和。
            </summary> 
            <param name="points">点集</param> 
            <returns>SSR</returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.#ctor(System.Double,System.Double)">
            <summary>
            通过斜率和截距构造回归线
            </summary>
            <param name="slope"></param>
            <param name="intercept"></param>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.GetY(System.Double)">
            <summary>
            根据 x 坐标计算对应的 y 坐标
            </summary>
            <param name="x">x 坐标</param>
            <returns>y 坐标</returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.GetX(System.Double)">
            <summary>
            根据 y 坐标计算对应的 x 坐标
            </summary>
            <param name="y">y 坐标</param>
            <returns>x 坐标</returns>
        </member>
        <member name="M:STTech.CodePlus.Algorithm.RegressionLine.GetAngle">
            <summary>
            根据斜率计算角度
            </summary>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.ConvexHull">
            <summary>
            凸包算法类
            </summary>
        </member>
        <member name="M:STTech.CodePlus.ConvexHull.GetConvexHullByGraham(STTech.CodePlus.PointD[])">
            <summary>
            通过Graham算法获取围绕所有点的凸多边形的轮廓点<br/>
            复杂度：O(nlogn)
            </summary>
            <param name="points">点数组</param>
            <returns>轮廓点数组</returns>
        </member>
        <member name="M:STTech.CodePlus.ConvexHull.GetConvexHullByJarvis(STTech.CodePlus.PointD[])">
            <summary>
            通过Jarvis算法获取围绕所有点的凸多边形的轮廓点<br/>
            Jarvis 算法的时间复杂度是 O(nh)，其中 n 是点集中点的个数，h 是凸包中点的个数。因为 Jarvis 算法的主要工作是扫描点集中的每个点，对于每个点，需要在点集中查找下一个点，因此时间复杂度为 O(n^2)。但是由于 Jarvis 算法的凸包点数通常比较少，所以 h远小于n，因此 Jarvis 算法的时间复杂度通常被认为是 O(n) 级别的。
            需要注意的是，当点集中存在大量共线的点时，Jarvis 算法的时间复杂度可能会退化到 O(n^2) 级别，因为需要不断地扫描点集中的点来找到下一个点。此外，当点集中存在大量重复的点时，Jarvis 算法可能会陷入死循环，因此需要对点集进行去重操作。
            </summary>
            <param name="points">点数组</param>
            <returns>轮廓点数组</returns>
        </member>
        <member name="M:STTech.CodePlus.ConvexHull.GetConvexHullByAndrews(STTech.CodePlus.PointD[])">
            <summary>
            获取围绕所有点的凸多边形的轮廓点<br/>
            复杂度：O(n log n)
            </summary>
            <param name="points">点数组</param>
            <returns>轮廓点数组</returns>
        </member>
        <member name="M:STTech.CodePlus.ConvexHull.Cross(STTech.CodePlus.PointD,STTech.CodePlus.PointD,STTech.CodePlus.PointD)">
            <summary>
            计算从 a 到 b 再到 c 的叉积
            </summary>
            <param name="a">点 a</param>
            <param name="b">点 b</param>
            <param name="c">点 c</param>
            <returns>叉积值</returns>
        </member>
        <member name="T:STTech.CodePlus.Point`1">
            <summary>
            表示一个二维坐标点
            </summary>
            <typeparam name="T">坐标的数据类型</typeparam>
        </member>
        <member name="P:STTech.CodePlus.Point`1.X">
            <summary>
            X 坐标
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Point`1.Y">
            <summary>
            Y 坐标
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Point`1.#ctor(`0,`0)">
            <summary>
            初始化一个二维坐标点
            </summary>
            <param name="x">X 坐标</param>
            <param name="y">Y 坐标</param>
        </member>
        <member name="P:STTech.CodePlus.Components.BaseMonitor`3.Source">
            <summary>
            数据源
            </summary>
        </member>
        <member name="E:STTech.CodePlus.Components.BaseMonitor`3.ValueChanged">
            <summary>
            当任意值发生变更时
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.CompareValuePickHandler(`1)">
            <summary>
            比较属性值选择器
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.IndexConvertHandler(System.Int32)">
            <summary>
            数据序号转换过程
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.IndexReductionHandler(`0)">
            <summary>
            数据序号还原过程
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.GetValue(`0)">
            <summary>
            获取值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.Update(`1[])">
            <summary>
            更新数据源内的数据
            </summary>
            <param name="newData"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.Notify">
            <summary>
            通知发生了变化
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.Backup">
            <summary>
            备份
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.BaseMonitor`3.Check">
            <summary>
            检查是否发生了变化
            </summary>
            <returns></returns>
        </member>
        <member name="P:STTech.CodePlus.Components.MemoryMonitor`3.BackupArray">
            <summary>
            备份数据
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.MemoryMonitor`3.Backup">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.MemoryMonitor`3.Check">
            <inheritdoc/>
        </member>
        <member name="P:STTech.CodePlus.Components.ValueChangedEventArgs`2.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.ValueChangedEventArgs`2.Index">
            <summary>
            变更值的编号
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.ValueChangedEventArgs`2.OriginalValue">
            <summary>
            原值
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.ValueChangedEventArgs`2.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.ValuesMonitor`1.CompareValuePickHandler(`0)">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.ValuesMonitor`1.IndexConvertHandler(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.ValuesMonitor`1.IndexReductionHandler(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.Comparator">
            <summary>
            比较器
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.Comparator.Compare``1(``0,``0)">
            <summary>
            比较大小
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Components.Comparator.CompareResult`1">
            <summary>
            比较结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:STTech.CodePlus.Components.Comparator.CompareResult`1.Relation">
            <summary>
            两个值之间的关系
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.Comparator.CompareResult`1.GreatValue">
            <summary>
            较大值
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.Comparator.CompareResult`1.SmallValue">
            <summary>
            较小值
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Components.Comparator.CompareRelation">
            <summary>
            比较结果
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.Comparator.CompareRelation.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.Comparator.CompareRelation.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.Comparator.CompareRelation.More">
            <summary>
            大于
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Components.ObjectPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:STTech.CodePlus.Components.ObjectPool`1.FreeCount">
            <summary>
            空闲对象总数
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.ObjectPool`1.MaxRetainCount">
            <summary>
            保留对象的最大个数
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.ObjectPool`1.constructObjectHandler">
            <summary>
            对象构造过程
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.ObjectPool`1.needToDispose">
            <summary>
            释放时是否销毁
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            构造对象池
            </summary>
            <param name="maxRetainCount"></param>
            <param name="constructObjectHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.ObjectPool`1.ConstructObjectHandler">
            <summary>
            对象构造过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Components.ObjectPool`1.Release(`0)">
            <summary>
            释放对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.ObjectPool`1.Get">
            <summary>
            获取对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Components.ITaskQueue`1">
            <summary>
            任务队列接口
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:STTech.CodePlus.Components.ITaskQueue`1.Join(`0)">
            <summary>
            将待处理数据存入任务队列
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:STTech.CodePlus.Components.TaskQueue`1">
            <summary>
            任务队列基类
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:STTech.CodePlus.Components.TaskQueue`1.ProcessHandler">
            <summary>
            处理过程
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.TaskQueue`1.IsDisposed">
            <summary>
            销毁状态
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.JoinHandler(`0)">
            <summary>
            将待处理数据存入任务队列的具体实现
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.Join(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.TaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.LockedTaskQueue`1">
            <summary>
            阻塞式队列任务
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:STTech.CodePlus.Components.LockedTaskQueue`1.processLocker">
            <summary>
            处理过程锁
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.LockedTaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造临时工式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.LockedTaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.LockedTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.LockedTaskQueue`1.JoinHandler(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:STTech.CodePlus.Components.FloaterTaskQueue`1">
            <summary>
            临时工式队列任务
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:STTech.CodePlus.Components.FloaterTaskQueue`1.processLocker">
            <summary>
            处理过程锁
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.FloaterTaskQueue`1.queue">
            <summary>
            待处理数据队列
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.FloaterTaskQueue`1.isFree">
            <summary>
            空闲状态
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造临时工式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.JoinHandler(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.FloaterWorkHandler">
            <summary>
            临时工任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.FloaterTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1">
            <summary>
            长工式队列任务
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.processLocker">
            <summary>
            处理过程锁
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.floaterWorkLocker">
            <summary>
            线程任务锁
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.queue">
            <summary>
            待处理数据队列
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.isFree">
            <summary>
            空闲状态
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.Timeout">
            <summary>
            线程空闲等待时长
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.#ctor(System.Action{`0},System.Int32)">
            <summary>
            构造长工式队列任务
            </summary>
            <param name="processHandler"></param>
            <param name="timeout">线程空闲等待时长</param>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.JoinHandler(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.LongTermWorkHandler">
            <summary>
            长工任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.LongTermWorkerTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.SharedTaskQueue`1">
            <summary>
            共享式队列任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造共享式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue`1.Join(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.SharedTaskQueue">
            <summary>
            共享式队列任务基类
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.SharedTaskQueue.innerTaskQueue">
            <summary>
            全局的内部队列任务实体
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue.#ctor(System.Action{System.Object})">
            <summary>
            构造共享式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue.SharedWorkHandler(System.Action)">
            <summary>
            共享
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue.JoinHandler(System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.SharedTaskQueue.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.UtopiaTaskQueue`1">
            <summary>
            乌托邦式队列任务
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:STTech.CodePlus.Components.UtopiaTaskQueue`1.processLocker">
            <summary>
            处理过程锁
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.UtopiaTaskQueue`1.queue">
            <summary>
            待处理数据队列
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.UtopiaTaskQueue`1.isFree">
            <summary>
            空闲状态
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.UtopiaTaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造乌托邦式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.UtopiaTaskQueue`1.JoinHandler(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.UtopiaTaskQueue`1.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.UtopiaTaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.UtopiaTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.WaiterTaskQueue`1">
            <summary>
            服务员式队列任务
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:STTech.CodePlus.Components.WaiterTaskQueue`1.queue">
            <summary>
            待处理数据队列
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Components.WaiterTaskQueue`1.processLocker">
            <summary>
            处理过程锁
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.WaiterTaskQueue`1.#ctor(System.Action{`0})">
            <summary>
            构造服务员式队列任务
            </summary>
            <param name="processHandler"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.WaiterTaskQueue`1.WaiterWorkHandler">
            <summary>
            服务员任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.WaiterTaskQueue`1.JoinHandler(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:STTech.CodePlus.Components.WaiterTaskQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Components.WaiterTaskQueue`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Components.TimeoutCache`1">
            <summary>
            带超时的泛型缓存
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
        </member>
        <member name="P:STTech.CodePlus.Components.TimeoutCache`1.Timeout">
            <summary>
            超时时长（毫秒）
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.TimeoutCache`1.Value">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Components.TimeoutCache`1.IsExpired">
            <summary>
            是否已超时
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Components.TimeoutCache`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            构造带超时的泛型缓存对象
            </summary>
            <param name="updateHandler">更新方法</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="T:STTech.CodePlus.Drawing.BaseImageReader">
            <summary>
            基础的图像读取器
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Drawing.BaseImageReader.InitializeImageParameters">
            <summary>
            初始化图像参数
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.FileHeader">
            <summary>
            BMP文件头
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.InfoHeader">
            <summary>
            BMP信息头
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Drawing.BmpReader.InitializeImageParameters">
            <inheritdoc/>
        </member>
        <member name="M:STTech.CodePlus.Drawing.BmpReader.GetColorPaletteData">
            <summary>
            获取调色板部分数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpFileHeader.Type">
            <summary>
            文件类型<br/>文件类型，通常为"BM"
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpFileHeader.Size">
            <summary>
            文件大小<br/>整个BMP文件的大小
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpFileHeader.Reserved1">
            <summary>
            保留字段<br/>保留字段，一般设置为0
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpFileHeader.Reserved2">
            <summary>
            保留字段<br/>保留字段，一般设置为0
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpFileHeader.Offset">
            <summary>
            偏移量<br/>从文件头到像素数据的偏移量
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.Size">
            <summary>
            信息头大小<br/>信息头的大小
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.Width">
            <summary>
            图像宽度<br/>图像的宽度
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.Height">
            <summary>
            图像高度<br/>图像的高度
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.Planes">
            <summary>
            颜色平面数<br/>颜色平面数，一般为1
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.BitCount">
            <summary>
            每像素位数<br/>每个像素的位数
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.Compression">
            <summary>
            压缩方式<br/>图像的压缩方式
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.SizeImage">
            <summary>
            图像数据大小<br/>像素数据的大小
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.XPelsPerMeter">
            <summary>
            水平分辨率<br/>图像的水平分辨率
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.YPelsPerMeter">
            <summary>
            垂直分辨率<br/>图像的垂直分辨率
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.ClrUsed">
            <summary>
            使用的颜色数<br/>实际使用的颜色数
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.BmpReader.BmpInfoHeader.ClrImportant">
            <summary>
            重要颜色数<br/>重要颜色的索引数
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.Signature">
            <summary>
            PNG文件头固定标识符
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.FileHeader">
            <summary>
            文件头
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.Palette">
            <summary>
            调色盘
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.ImageData">
            <summary>
            图像数据块
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.Chunks">
            <summary>
            数据块列表
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Drawing.PngReader.InitializeImageParameters">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngChunk">
            <summary>
            PNG数据块
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk">
            <summary>
            PNG文件头
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.Width">
            <summary>
            图像宽度
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.Height">
            <summary>
            图像高度
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.BitDepth">
            <summary>
            位深度
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.ColorType">
            <summary>
            色彩类型
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.CompressionMethod">
            <summary>
            压缩方法
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.FilterMethod">
            <summary>
            滤波器方法
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.InterlaceMethod">
            <summary>
            交错方法
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType">
            <summary>
            表示PNG图像的色彩类型
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType.Grayscale">
            <summary>
            灰度
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType.TrueColor">
            <summary>
            真彩色
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType.IndexedColor">
            <summary>
            索引色
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType.GrayscaleWithAlpha">
            <summary>
            带Alpha通道的灰度
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngColorType.TruecolorWithAlpha">
            <summary>
            带Alpha通道的真彩色
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngCompressionMethod">
            <summary>
            PNG图像的压缩方法
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngCompressionMethod.Deflate">
            <summary>
            DEFLATE压缩
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngFilterMethod">
            <summary>
            PNG图像的滤波方法
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngFilterMethod.Adaptive">
            <summary>
            自适应滤波
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngInterlaceMethod">
            <summary>
            PNG图像的交错方法
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngInterlaceMethod.None">
            <summary>
            不使用交错
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.PngReader.PngFileHeaderChunk.PngInterlaceMethod.Adam7">
            <summary>
            Adam7交错
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngPaletteChunk">
            <summary>
            PNG调色盘
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Drawing.PngReader.PngPaletteChunk.GetColors">
            <summary>
            获取颜色表
            </summary>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Drawing.PngReader.PngImageDataChunk">
            <summary>
            PNG图像数据块
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.TiffReader.FileHeader">
            <summary>
            TIFF信息头
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Drawing.TiffReader.InitializeImageParameters">
            <inheritdoc/>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffTags">
            <summary>
            表示TIFF文件标签的枚举类
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.NewSubfileType">
            <summary>
            新子文件类型的一般指示，表示此子文件中包含的数据类型。
            NewSubfileType. A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.SubfileType">
            <summary>
            子文件类型的一般指示，表示此子文件中包含的数据类型。
            SubfileType. A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ImageWidth">
            <summary>
            图像的列数，即每行的像素数。
            ImageWidth. The number of columns in the image, i.e., the number of pixels per row.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ImageLength">
            <summary>
            图像中的像素行数。
            ImageLength. The number of rows of pixels in the image.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.BitsPerSample">
            <summary>
            每个组分的位数。
            BitsPerSample. Number of bits per component.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Compression">
            <summary>
            图像数据的压缩方案。
            Compression. Compression scheme used on the image data.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.PhotometricInterpretation">
            <summary>
            图像数据的色彩空间。
            PhotometricInterpretation. The color space of the image data.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Thresholding">
            <summary>
            用于将灰度转换为黑白像素的技术。
            Thresholding. For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.CellWidth">
            <summary>
            用于创建二值文件的抖动或半色调矩阵的宽度。
            CellWidth. The width of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.CellLength">
            <summary>
            用于创建二值文件的抖动或半色调矩阵的长度。
            CellLength. The length of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.FillOrder">
            <summary>
            字节内位的逻辑顺序。
            FillOrder. The logical order of bits within a byte.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ImageDescription">
            <summary>
            描述图像主题的字符串。
            ImageDescription. A string that describes the subject of the image.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Make">
            <summary>
            扫描仪制造商。
            Make. The scanner manufacturer.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Model">
            <summary>
            扫描仪型号名称或编号。
            Model. The scanner model name or number.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.StripOffsets">
            <summary>
            对于每个条带，该条带的字节偏移量。
            StripOffsets. For each strip, the byte offset of that strip.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Orientation">
            <summary>
            图像相对于行和列的方向。
            Orientation. The orientation of the image with respect to the rows and columns.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.SamplesPerPixel">
            <summary>
            每个像素的组件数。
            SamplesPerPixel. The number of components per pixel.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.RowsPerStrip">
            <summary>
            每个条带的行数。
            RowsPerStrip. The number of rows per strip.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.StripByteCounts">
            <summary>
            对于每个条带，压缩后该条带中的字节数。
            StripByteCounts. For each strip, the number of bytes in the strip after compression.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.MinSampleValue">
            <summary>
            使用的最小组件值。
            MinSampleValue. The minimum component value used.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.MaxSampleValue">
            <summary>
            使用的最大组件值。
            MaxSampleValue. The maximum component value used.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.XResolution">
            <summary>
            ImageWidth方向中每个ResolutionUnit的像素数。
            XResolution. The number of pixels per ResolutionUnit in the ImageWidth direction.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.YResolution">
            <summary>
            ImageLength方向中每个ResolutionUnit的像素数。
            YResolution. The number of pixels per ResolutionUnit in the ImageLength direction.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.PlanarConfiguration">
            <summary>
            每个像素的组件存储方式。
            PlanarConfiguration. How the components of each pixel are stored.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.FreeOffsets">
            <summary>
            TIFF文件中每个连续未使用字节字符串的字节偏移量。
            FreeOffsets. For each string of contiguous unused bytes in a TIFF file, the byte offset of the string.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.FreeByteCounts">
            <summary>
            TIFF文件中每个连续未使用字节字符串的字节数。
            FreeByteCounts. For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.GrayResponseUnit">
            <summary>
            GrayResponseCurve中包含信息的精度。
            GrayResponseUnit. The precision of the information contained in the GrayResponseCurve.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.GrayResponseCurve">
            <summary>
            对于灰度数据，每个可能像素值的光学密度。
            GrayResponseCurve. For grayscale data, the optical density of each possible pixel value.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ResolutionUnit">
            <summary>
            XResolution和YResolution的度量单位。
            ResolutionUnit. The unit of measurement for XResolution and YResolution.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Software">
            <summary>
            创建图像时使用的软件包（们）的名称和版本号。
            Software. Name and version number of the software package(s) used to create the image.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.DateTime">
            <summary>
            图像创建时的日期和时间。
            DateTime. Date and time of image creation.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Artist">
            <summary>
            创建图像的人员。
            Artist. Person who created the image.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.HostComputer">
            <summary>
            创建图像时使用的计算机和/或操作系统。
            HostComputer. The computer and/or operating system in use at the time of image creation.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ColorMap">
            <summary>
            调色板颜色图像的颜色映射。
            ColorMap. A color map for palette color images.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.ExtraSamples">
            <summary>
            额外组件的描述。
            ExtraSamples. Description of extra components.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffTags.Copyright">
            <summary>
            版权声明。
            Copyright. 
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.ByteOrder">
            <summary>
            端序
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffFileHeader">
            <summary>
            TIFF文件头
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.TiffReader.TiffFileHeader.ByteOrder">
            <summary>
            字节顺序标识
            字节顺序标识可以是以下两种值之一：
            "II"：表示小端序（低位字节在前）
            "MM"：表示大端序（高位字节在前）
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.TiffReader.TiffFileHeader.Identifier">
            <summary>
            标识符
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.TiffReader.TiffFileHeader.IFDOffset">
            <summary>
            第一个IFD的偏移量
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffBinaryReader">
            <summary>
            TIFF二进制读取器
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Drawing.TiffReader.TiffBinaryReader.ByteOrder">
            <summary>
            字节端序
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffDataType">
            <summary>
            表示TIFF文件数据类型的枚举类
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.BYTE">
            <summary>
            无符号8位整数(1个字节)
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.ASCII">
            <summary>
            ASCII编码的8位字节，最后一个字节必须是NUL（二进制零）
            ASCII 8-bit byte that contains a 7-bit ASCII code; the last byte must be NUL (binary zero).
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.SHORT">
            <summary>
            16位（2字节）无符号整数
            16-bit (2-byte) unsigned integer
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.LONG">
            <summary>
            32位（4字节）无符号整数
            32-bit (4-byte) unsigned integer
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.RATIONAL">
            <summary>
            两个LONG类型数据，第一个代表分子
            Two LONGs: the first represents the numerator
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.SBYTE">
            <summary>
            8位有符号整数（二进制补码）
            An 8-bit signed (twos-complement) integer
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.UNDEFINED">
            <summary>
            未定义类型，8位字节可以包含任何内容，取决于字段的定义
            An 8-bit byte that may contain anything, depending on the definition of the field
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.SSHORT">
            <summary>
            16位有符号整数（二进制补码）
            A 16-bit (2-byte) signed (twos-complement) integer
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.SLONG">
            <summary>
            32位有符号整数（二进制补码）
            A 32-bit (4-byte) signed (twos-complement) integer
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.SRATIONAL">
            <summary>
            两个SLONG类型数据，第一个代表分数的分子，第二个代表分母
            Two SLONG’s: the first represents the numerator of a fraction, the second the denominator
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.FLOAT">
            <summary>
            单精度（4字节）IEEE格式
            Single precision (4-byte) IEEE format
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffDataType.DOUBLE">
            <summary>
            双精度（8字节）IEEE格式
            Double precision (8-byte) IEEE format
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffFileDirectory">
            <summary>
            TIFF文件IDF信息部分
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffCompression">
            <summary>
            表示TIFF文件压缩算法的枚举类
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.None">
            <summary>
            无压缩
            No compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.CCITTRLE">
            <summary>
            CCITT改进的哈夫曼编码（1维）
            CCITT modified Huffman RLE (1D)
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.CCITT_T4_FAX3">
            <summary>
            CCITT T.4组（二进制）
            CCITT T.4 (T.4-encoded)
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.CCITT_T6_FAX4">
            <summary>
            CCITT T.6组（二进制）
            CCITT T.6 (T.6-encoded)
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.LZW">
            <summary>
            LZW压缩
            LZW compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.OJPEG">
            <summary>
            无损JPEG
            JPEG ('old-style' JPEG, 仅在专利问题解决前使用)
            Old-style JPEG (Tech note 2)
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.JPEG">
            <summary>
            JPEG压缩
            JPEG compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.Next">
            <summary>
            Next编码
            NeXT 2-bit encoding
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.CCITTRLEW">
            <summary>
            基于RLE的压缩，用于字节对齐
            RLE compression, word aligned
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.PackBits">
            <summary>
            PackBits压缩
            PackBits compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.ThunderScan">
            <summary>
            ThunderScan压缩
            ThunderScan compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.It8CTPad">
            <summary>
            IT8CTPAD压缩
            IT8 CT w/padding
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.It8LW">
            <summary>
            IT8 LW压缩
            IT8 Linework RLE
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.It8MP">
            <summary>
            IT8MP压缩
            IT8 Monochrome picture
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.It8BL">
            <summary>
            IT8BL压缩
            IT8 Binary line art
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.PixarFilm">
            <summary>
            Pixar影片压缩
            Pixar companded 10bit LZW
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.PixarLog">
            <summary>
            Pixar记录压缩
            Pixar companded 11bit ZIP
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.Deflate">
            <summary>
            Deflate压缩
            Deflate compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.AdobeDeflate">
            <summary>
            Adobe Deflate压缩
            Adobe Deflate compression
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.DCS">
            <summary>
            Kodak DCS压缩
            Kodak DCS encoding
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.JBig">
            <summary>
            JBIG压缩
            JBIG
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.SGILog">
            <summary>
            SGI LOG压缩
            SGI Log Luminance RLE
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.SGILog24">
            <summary>
            SGI LOG24压缩
            SGI Log 24-bit
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffCompression.JP2000">
            <summary>
            JPEG 2000压缩
            JPEG2000
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation">
            <summary>
            表示TIFF文件光度解释的枚举类
            https://www.awaresystems.be/imaging/tiff/tifftags/photometricinterpretation.html
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation.WhiteIsZero">
            <summary>
            白色为零。对于双色和灰度图像：0表示为白色。
            White is zero. For bilevel and grayscale images: 0 is imaged as white.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation.BlackIsZero">
            <summary>
            黑色为零。对于双色和灰度图像：0表示为黑色。
            Black is zero. For bilevel and grayscale images: 0 is imaged as black.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation.RGB">
            <summary>
            RGB。RGB值(0,0,0)表示黑色，(255,255,255)表示白色，假设为8位的分量。分量以指定的顺序存储：红色，绿色，蓝色。
            RGB. RGB value of (0,0,0) represents black, and (255,255,255) represents white, assuming 8-bit components. The components are stored in the indicated order: first Red, then Green, then Blue.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation.PaletteColor">
            <summary>
            调色板颜色。在此模型中，一种颜色用单个分量描述。分量的值用作颜色映射字段中的红色、绿色和蓝色曲线的索引，以检索定义颜色的RGB三元组。当PhotometricInterpretation=3时，ColorMap必须存在，并且SamplesPerPixel必须为1。
            Palette color. In this model, a color is described with a single component. The value of the component is used as an index into the red, green and blue curves in the ColorMap field to retrieve an RGB triplet that defines the color. When PhotometricInterpretation=3 is used, ColorMap must be present and SamplesPerPixel must be 1.
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Drawing.TiffReader.TiffPhotometricInterpretation.TransparencyMask">
            <summary>
            透明掩模。这意味着图像用于定义同一TIFF文件中另一个图像的不规则形状的区域。SamplesPerPixel和BitsPerSample必须为1。建议使用PackBits压缩。1位定义区域的内部；0位定义区域的外部。
            Transparency Mask. This means that the image is used to define an irregularly shaped region of another image in the same TIFF file. SamplesPerPixel and BitsPerSample must be 1. PackBits compression is recommended. The 1-bits define the interior of the region; the 0-bits define the exterior of the region.
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.BaseReusableThread">
            <summary>
            可复用线程基类
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.BaseReusableThread.DefaultIdleTimeoutPeriod">
            <summary>
            默认的闲置超时时长
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.BaseReusableThread.runningLocker">
            <summary>
            线程任务运行中的锁
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.IdleTimeoutPeriod">
            <summary>
            闲置超时时长
            </summary>
        </member>
        <member name="E:STTech.CodePlus.Threading.BaseReusableThread.IdleTimeout">
            <summary>
            限制超时
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.State">
            <summary>
            当前状态 (空闲/忙碌)
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.TaskDelegation">
            <summary>
            任务内容
            当任务执行完成后可替换
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.IsDisposed">
            <summary>
            是否已销毁
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.IsBusy">
            <summary>
            是否是忙碌状态
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.BaseReusableThread.IsFree">
            <summary>
            是否是空闲状态
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.BaseReusableThread.Start">
            <summary>
            开始执行任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.BaseReusableThread.InnerLifecycleHandler">
            <summary>
            内部线程(可复用任务)的生命周期
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.BaseReusableThread.RaiseIdleTimeout(System.Object,System.EventArgs)">
            <summary>
            触发闲置超时事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:STTech.CodePlus.Threading.BaseReusableThread.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.CompletionStatus">
            <summary>
            任务完成状态
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.CompletionStatus.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.CompletionStatus.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.ReusableState">
            <summary>
            可复用Task当前的状态
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.ReusableState.Free">
            <summary>
            空闲
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.ReusableState.Busy">
            <summary>
            忙碌
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.ReusableState.Disposed">
            <summary>
            已销毁
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.CompletedEventArgs">
            <summary>
            任务完成事件参数
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.CompletedEventArgs.Status">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.CompletedEventArgs.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.ReusableTask">
            <summary>
            可复用任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableTask.#ctor">
            <summary>
            构造可复用任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableTask.Start">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableTask.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableTask.InnerLifecycleHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.ReusableThread">
            <summary>
            可复用线程
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableThread.#ctor">
            <summary>
            构造可复用线程
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableThread.Start">
            <summary>
            开始执行任务
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableThread.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ReusableThread.InnerLifecycleHandler">
            <summary>
            可复用任务的生命周期
            </summary>
        </member>
        <member name="T:STTech.CodePlus.Threading.TaskDelegation">
            <summary>
            任务内容
            </summary>
        </member>
        <member name="E:STTech.CodePlus.Threading.TaskDelegation.Completed">
            <summary>
            任务完成事件
            </summary>
        </member>
        <member name="E:STTech.CodePlus.Threading.TaskDelegation.Started">
            <summary>
            任务开始事件
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.TaskDelegation.TaskAction">
            <summary>
            临时任务动作
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.TaskDelegation.RaiseTaskCompleted(System.Object,STTech.CodePlus.Threading.CompletedEventArgs)">
            <summary>
            触发任务完成事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:STTech.CodePlus.Threading.TaskDelegation.RaiseTaskStarted(System.Object,System.EventArgs)">
            <summary>
            触发任务开始事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:STTech.CodePlus.Threading.TaskExtension">
            <summary>
            Task功能扩展
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.TaskExtension.Run``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0})">
            <summary>
            开启多个线程处理一组数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects">待处理数据</param>
            <param name="threadCount">线程数</param>
            <param name="handler">单个数据对象的处理过程</param>
        </member>
        <member name="M:STTech.CodePlus.Threading.TaskExtension.Run(System.Action,System.Int32)">
            <summary>
            将指定的任务依序在线程池上运行，并返回表示该工作的Task对象。
            超时时间达到后将取消任务。
            </summary>
            <param name="action">异步执行的工作</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:STTech.CodePlus.Threading.TaskExtension.Run``1(System.Func{``0},System.Int32)">
            <summary>
            将指定的任务依序在线程池上运行，并返回表示该工作的Task(TResult)对象。
            超时时间达到后将取消任务。
            </summary>
            <typeparam name="T">任务返回值类型</typeparam>
            <param name="action">异步执行的工作</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="T:STTech.CodePlus.Threading.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="P:STTech.CodePlus.Threading.ThreadPool.IdleTimeoutPeriod">
            <summary>
            闲置超时时长
            </summary>
        </member>
        <member name="F:STTech.CodePlus.Threading.ThreadPool.pool">
            <summary>
            复用线程对象池
            </summary>
        </member>
        <member name="M:STTech.CodePlus.Threading.ThreadPool.#ctor(System.Int32,System.UInt32)">
            <summary>
            构造可复用线程池
            </summary>
            <param name="retainedThreadCount">驻留线程数量</param>
            <param name="idleTimeoutPeriod">单个线程闲置超时时长（闲置超时的线程会被释放）</param>
        </member>
        <member name="M:STTech.CodePlus.Threading.ThreadPool.Run(STTech.CodePlus.Threading.TaskDelegation)">
            <summary>
            执行任务
            </summary>
            <param name="taskDelegation"></param>
        </member>
        <member name="M:STTech.CodePlus.Threading.ThreadPool.Release(STTech.CodePlus.Threading.ReusableThread)">
            <summary>
            释放复用线程
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:System.ArrayExtensions.ToList``1(System.Array)">
            <summary>
            转为指明类型的列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.ToHexCodeString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转换为16进制代码格式的字符串
            例如：0xFF,0xA1,0xA2,0xB1,0xB2
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转换为16进制的字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            转换为16进制的字符串
            </summary>
            <param name="data"></param>
            <param name="format">转换格式；若字母转为大写则为"{0:X2}"，小写为"{0:x2}"</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.ToBase64String(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转Base64字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.EncodeToString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            转为指定编码(默认UTF-8)的字符串
            </summary>
            <param name="data"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.GetMD5(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            计算字节数组的MD5值
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.GetMD5String(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)">
            <summary>
            计算字节数组的MD5值
            </summary>
            <param name="data"></param>
            <param name="capital">是否转换为大写字母，true为大写，false为小写</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.CheckSum(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            和校验
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.PadRight(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Byte)">
            <summary>
            从右填充
            </summary>
            <param name="data"></param>
            <param name="len">填充后总长度</param>
            <param name="placeholder">占位符</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BytesExtensions.PadLeft(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Byte)">
            <summary>
            从左填充
            </summary>
            <param name="data"></param>
            <param name="len">填充后总长度</param>
            <param name="placeholder">占位符</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ContainsKeyAndValueNotNull``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            字典中包含键值且值不为空
            </summary>
            <param name="dict">字典</param>
            <param name="key">键名</param>
            <returns>是否包含键名且值不为空</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            从字典中获取值
            如果指定的键值不存在或值为空则先赋指定的值
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.RemoveFromKeys(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            从字典中移除键名集合中存在的项
            </summary>
            <param name="dict"></param>
            <param name="keys">要移除的键名集合</param>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.RemoveOutsideKeys(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            从字典中移除键名集合中不存在的项
            </summary>
            <param name="dict"></param>
            <param name="keys">要保留的键名集合</param>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            等尺寸分片
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="blockSize">每部分的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.SliceToArraySegment``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            等尺寸分成多片ArraySegment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="blockSize">每部分的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.BalanceToArraySegment``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            平均分成多组ArraySegment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="blockCount">分组数量</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.Balance``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            平均分成多组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="blockCount">分组数量</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            合并字节数组
            </summary>
            <param name="data">原数据(允许为空)</param>
            <param name="append">追加数据</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.StartWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断起始部分是否一致
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})" -->
        <member name="T:System.Collections.Generic.IEnumerableKmpExtensions">
            <summary>
            KMP算法模式匹配
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableKmpExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            模式匹配（KMP）
            查找子串在主串中的起始索引位置
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="source">主串</param>
            <param name="target">子串</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableKmpExtensions.MatchByPrefixAndSuffix``1(``0[],``0[],``0[])">
            <summary>
            通过前缀和后缀匹配内容
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="source">原始数据</param>
            <param name="prefix">前缀数据</param>
            <param name="suffix">后缀数据</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.QueueExtensions.Discard``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            抛弃超出指定长度的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:System.EndianConvertExtensions">
            <summary>
            数值类型的端序转换扩展方法
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.Int16)">
            <summary>
            将16位有符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.UInt16)">
            <summary>
            将16位无符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.Int32)">
            <summary>
            将32位有符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.UInt32)">
            <summary>
            将32位无符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.Int64)">
            <summary>
            将64位有符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.UInt64)">
            <summary>
            将64位无符号整数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.Single)">
            <summary>
            将32位浮点数转换端序
            </summary>
        </member>
        <member name="M:System.EndianConvertExtensions.ConvertEndianness(System.Double)">
            <summary>
            将64位浮点数转换端序
            </summary>
        </member>
        <member name="M:System.IO.FileInfoExtensions.GetMD5ForLargeFile(System.IO.FileInfo)">
            <summary>
            获取大文件的MD5值
            通过文件流的方式读取，可支持大文件
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileInfoExtensions.GetMD5ForSmallFile(System.IO.FileInfo)">
            <summary>
            获取文件的MD5值
            一次读入内存，建议小文件使用
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileInfoExtensions.GetMD5(System.IO.FileInfo)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectExtensions.With``1(``0,System.Action{``0})">
            <summary>
            提供访问（操作）对象成员的回调，并返回当前对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.PointExtensions.Distance(STTech.CodePlus.PointD,STTech.CodePlus.PointD)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.PointExtensions.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.PointExtensions.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.PointExtensions.IsNeighborPoint(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            判断两点是否是相邻点（通过距离阈值）
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.PointExtensions.IsNeighborPoint(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            判断两点是否是相邻点（通过距离阈值）
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            字符串类型的扩展
            </summary>
        </member>
        <member name="M:System.StringExtensions.GetMD5String(System.String,System.String)">
            <summary>
            获取字符串的MD5值
            </summary>
            <param name="input">源字符串</param>
            <param name="encodeName">字符编码的名称</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:System.StringExtensions.GetMD5(System.String,System.String)">
            <summary>
            计算字符串的MD5
            </summary>
            <param name="input"></param>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.GetBytes(System.String,System.String)">
            <summary>
            获取字符串的字节数组(默认UTF-8)
            </summary>
            <param name="str"></param>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.HexStringToBytes(System.String)">
            <summary>
            16进制字符串转byte数组
            </summary>
            <param name="hexString">16进制字符</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.MiddleExtract(System.String,System.String,System.String)">
            <summary>
            截取字符串中间段
            </summary>
            <param name="sourse"></param>
            <param name="startTag">起始标记</param>
            <param name="endTag">结束标记</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.IsometricInsert(System.String,System.Int32,System.String)">
            <summary>
            等距插入
            </summary>
            <param name="source"></param>
            <param name="size">间隔长度</param>
            <param name="value">插入字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.Slice(System.String,System.Int32)">
            <summary>
            等尺寸分片<br/>
            将字符串按指定大小分割成多个子串 
            </summary>
            <param name="source">源字符串</param>
            <param name="size">分割尺寸</param>
            <returns>子串列表</returns>
        </member>
        <member name="M:System.StringExtensions.Times(System.String,System.Int32)">
            <summary>
            将字符串重复指定次数
            </summary>
            <param name="source">源字符串</param>
            <param name="times">重复次数</param>
            <returns>重复后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.Times(System.Char,System.Int32)">
            <summary>
            将字符重复指定次数
            </summary>
            <param name="source">源字符</param>
            <param name="times">重复次数</param>
            <returns>重复后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.CutString(System.String,System.String,System.String)">
            <summary>
            通过指定的起始标记和结束标记截取字符串
            </summary>
            <param name="source">原始字符串</param>
            <param name="startMark">起始标记</param>
            <param name="endMark">结束标记</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据字典替换字符串
            </summary>
            <param name="source">原始字符串</param>
            <param name="dictionary">关键字替换词典</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.MatchByWildcard(System.String,System.String)">
            <summary>
            与含通配符的字符串进行比对，判断是否一致
            </summary>
            <param name="source">原始字符串</param>
            <param name="wildcard">含通配符的字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            插入分隔符合并成新字符串
            </summary>
            <param name="source">原始字符串集合</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.MatchByPrefixAndSuffix(System.String,System.String,System.String)">
            <summary>
            通过前缀和后缀匹配内容
            </summary>
            <param name="source">原始文本</param>
            <param name="prefix">前缀字符串</param>
            <param name="suffix">后缀字符串</param>
            <returns></returns>
        </member>
        <member name="T:System.TaskExtensions">
            <summary>
            Task扩展
            </summary>
        </member>
        <member name="M:System.TaskExtensions.WaitResult``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.TaskStatus,``0})">
            <summary>
            等待任务结束，在回调中处理结果
            </summary>
            <typeparam name="T">Task返回值类型</typeparam>
            <param name="task">任务对象</param>
            <param name="callback">处理结果的回调</param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.ToEnum``1(System.String,``0)">
            <summary>
            转枚举类型
            </summary>
            <typeparam name="T">指定枚举类型</typeparam>
            <param name="enumName">枚举名称</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Linq.XmlExtension.Tracing(System.Xml.Linq.XObject)">
            <summary>
            节点溯源
            </summary>
            <param name="xobj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Linq.XmlExtension.GetPath(System.Xml.Linq.XObject,System.String)">
            <summary>
            获取XML节点的路径
            </summary>
            <param name="xobj"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
    </members>
</doc>
